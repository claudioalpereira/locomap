@{
    Layout = "";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset=utf-8 />
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

   
        <script src="\Content\mapbox\jquery.min.js"></script>
    <script src='\Content\mapbox\mapbox.js'></script>
    <script src='\Content\mapbox\turf.min.js'></script>
    <link href='\Content\mapbox\mapbox.css' rel='stylesheet' />
   <!--  -->
    <link href='\Content\mapbox\base.css' rel='stylesheet' />
    <link href='\Content\mapbox\map.css' rel='stylesheet' />
</head>
<body>

    <audio src="kick.wav" preload="auto" id='kick'></audio>
    <audio src="coin.wav" preload="auto" id='coin'></audio>
    <audio src="fireball.wav" preload="auto" id='fireball'></audio>

    <div id='map'></div>
    <div id='sidebar' class='fill-navy-dark'>
        <div class='clearfix'>
            <div class='col6'>
                <div class='metriclabel small quiet space-top4 space-bottom4'>Total<br>Locomotives</div>
                <div class='metric retrieved denim'>0</div>
            </div>
            <div class='col6'>
                <div class='metriclabel small quiet space-top4 space-bottom4'>Locomotives<br>Running</div>
                <div class='metric queue'>0</div>
            </div>
        </div>
        <div class='metriclabel small quiet space-bottom4' style='padding-top:40px'>Last Updated</div>
        <div class='metric responsetime space-bottom4'>-</div>
        <div class='metriclabel small quiet space-top4 space-bottom2'>Events</div>
        <div class='ticker dark small text-left'></div>
    </div>
    <!--
    <div class='pad1 checkbox-pill white'>
        <input type='checkbox' id='hydra' onclick='soundOn=!soundOn'>
        <label for='hydra' class='button icon check fill-navy-dark black' id='sound'>Sound</label>
    </div>
    -->
    <script>
        L.mapbox.accessToken = 'pk.eyJ1IjoicGV0ZXJxbGl1IiwiYSI6ImpvZmV0UEEifQ._D4bRmVcGfJvo1wjuOpA1g';
        
        function reverseCoords(pair) { return [pair[1], pair[0]] }
        var receivedQuantity = 0;
        var responseNumerator = 0;
        //interval at which animation progresses, in milliseconds per frame
        var soundOn = false;
        var pickupPoints;

        function updateTicker(content) {

            $('.ticker')
              .prepend(content)

            window.setTimeout(function () {
                $('.ticker div').addClass('expanded')
            }, 50);
        };


        var map = L.mapbox.map('map', 'mapbox.light')
            .setView([40.74, -73.9921], 14);
        //map.scrollWheelZoom.disable();

        var pickups = L.mapbox.featureLayer().addTo(map);

        //update pickup markers and count
        function updatePickups() {
            pickups.setGeoJSON(pickupPoints);
            $('.queue').text(pickupPoints.features.length)
        }


    </script>


    <script src="/Scripts/jquery.signalR-2.2.2.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="/signalr/hubs"></script>

    <script type="text/javascript">





        function convertToGeoJson(json) {
            return {
                type: "FeatureCollection",
                features: json.map(function (e) {
                    return {
                        type: "Feature",
                        label: e.Loco,
                        properties: {
                            "marker-color": "#666",
                            "marker-size": "small",
                            "marker-symbol": "circle",
                            //"address": "64 Delancey St",
                            //"time_submitted": 1428941074549
                        },
                        "geometry": {
                            "type": "Point",
                            "coordinates": [e.Longitude, e.Latitude]
                        }
                    };
                })
            };
        }


        $(function () {
            // Declare a proxy to reference the hub.
            var notifications = $.connection.messagesHub;

            //debugger;
            // Create a function that the hub can call to broadcast messages.
            notifications.client.updateMessages = function () {
                getAllMessages()
            };
            // Start the connection.
            $.connection.hub.start().done(function () {
                console.log("connection started");
                getAllMessages();
            }).fail(function (e) {
                alert(e);
            });
        });

        function getAllMessages() {
            //var tbl = $('#messagesTable');
            $.ajax({
                url: 'home/GetMessages',
                contentType: 'application/html ; charset:utf-8',
                type: 'GET',
                dataType: 'html'
            }).success(function (result) {

                pickupPoints = convertToGeoJson(JSON.parse(result));
                updatePickups();

            }).error(function () {
                alert('ERROR retrieving data from the server');
            });
        }

    </script>
    </body></html>